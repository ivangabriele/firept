openapi: 3.1.0

info:
  title: FirePT Plugin
  summary: FirePT Plugin API.
  description: Local API to manage a codebase workspace.
  version: 'v1'
  contact:
    name: FirePT
    url: https://github.com/ivangabriele/firept
    email: firept@protonmail.com

servers:
  - url: https://firept.ngrok.app

tags:
  - name: Execution
    description: Handle execution operations in the current project workspace.
  - name: File Management
    description: Manage files in the current project workspace.

paths:
  /execute:
    post:
      operationId: execute
      description: Run a bash command in the current project workspace.
      summary: Run a bash command in the current project workspace.
      tags: ['Execution']
      requestBody:
        description: |
          Command to execute.
          If no relativePath is provided, the command will be executed in the project workspace root.
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  description: Bash command to execute.
                workingDirectoryRelativePath:
                  type: string
                  description: Project workspace relative path to the directory where the command will be executed.
              required: [command]
      responses:
        '200':
          description: Command output.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executeResponse'
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /files:
    get:
      operationId: getFiles
      description: Recusively list all files in the current project workspace. Ignoring .gitignore files.
      summary: Recusively list all files in the current project workspace. Ignoring .gitignore files.
      tags: ['File Management']
      parameters:
        - in: query
          name: workingDirectoryRelativePath
          description: Project workspace relative path to the directory. Optional. Default is project workspace root.
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of file relative paths.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFilesResponse'
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /file:
    get:
      operationId: readFile
      description: Read a file in the current project workspace.
      summary: Read a file in the current project workspace.
      tags: ['File Management']
      parameters:
        - in: query
          name: relativePath
          description: Project workspace relative path to the file.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: File properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFileResponse'
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    post:
      operationId: createFile
      description: Create a file or a directory in the current project workspace.
      summary: Create a file or a directory in the current project workspace.
      tags: ['File Management']
      parameters:
        - in: query
          name: relativePath
          description: Project workspace relative path to the file.
          schema:
            type: string
          required: true
      requestBody:
        description: |
          New file properties. If no content is provided, the new file will be a directory.
          Provide a content property with an empty string to create an empty file.
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: New file content. Can be an empty string.
              required: []
      responses:
        '201':
          description: New file or directory successfully created.
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    put:
      operationId: updateFile
      description: Update a file in the current project workspace.
      summary: Update a file in the current project workspace.
      tags: ['File Management']
      parameters:
        - in: query
          name: relativePath
          description: Project workspace relative path to the file.
          schema:
            type: string
          required: true
      requestBody:
        description: Updated file properties.
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Updated file content. Can be an empty string.
              required: [content]
      responses:
        '204':
          description: File successfully updated.
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    delete:
      operationId: deleteFile
      description: Delete a file from the current project workspace.
      summary: Delete a file from the current project workspace.
      tags: ['File Management']
      parameters:
        - in: query
          name: relativePath
          description: Project workspace relative path to the file.
          schema:
            type: string
          required: true
      responses:
        '204':
          description: File successfully deleted.
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /file/move:
    post:
      operationId: moveFile
      description: Move a file or a directory within the current project workspace.
      summary: Move a file or a directory within the current project workspace.
      tags: ['File Management']
      requestBody:
        description: Moved file properties.
        content:
          application/json:
            schema:
              type: object
              properties:
                fromRelativePath:
                  type: string
                  description: Project workspace relative path to the file or directory to move.
                toRelativePath:
                  type: string
                  description: Project workspace relative path to the new file or directory.
              required: [fromRelativePath, toRelativePath]
      responses:
        '204':
          description: File or directory successfully moved.
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /github/issue:
    get:
      operationId: getGithubIssue
      description: Get current project Github repository issue by its number.
      summary: Get current project Github repository issue by its number.
      tags: ['Github']
      parameters:
        - in: query
          name: issueNumber
          description: Github repository issue number.
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Github issue data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGithubIssueResponse'
        '400':
          description: Error payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

components:
  schemas:
    executeResponse:
      type: object
      properties:
        stdout:
          type: string
          description: Command stdout. Empty if no output.
        stderr:
          type: string
          description: Command stderr. Empty if no error.
      required: [stdout, stderr]

    getFilesResponse:
      type: array
      items:
        type: string
        description: Directories end with a trailing slash. Otherwise, it's a file.

    getFileResponse:
      type: object
      properties:
        content:
          type: string
          description: File content.
        relativePath:
          type: string
          description: Project workspace relative path to the created file.
      required: [content, relativePath]

    getGithubIssueResponse:
      type: object
      properties:
        body:
          type: string
          description: Github issue description. May be empty.
        title:
          type: string
          description: Github issue title.
        comments:
          type: array
          items:
            type: object
            properties:
              body:
                type: string
                description: Github issue comment body. May be empty.
            required: [body]
      required: [content, relativePath]

    errorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message.
      required: [error]
